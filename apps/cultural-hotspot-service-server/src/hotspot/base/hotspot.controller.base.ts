/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { HotspotService } from "../hotspot.service";
import { HotspotCreateInput } from "./HotspotCreateInput";
import { Hotspot } from "./Hotspot";
import { HotspotFindManyArgs } from "./HotspotFindManyArgs";
import { HotspotWhereUniqueInput } from "./HotspotWhereUniqueInput";
import { HotspotUpdateInput } from "./HotspotUpdateInput";

export class HotspotControllerBase {
  constructor(protected readonly service: HotspotService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Hotspot })
  async createHotspot(
    @common.Body() data: HotspotCreateInput
  ): Promise<Hotspot> {
    return await this.service.createHotspot({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Hotspot] })
  @ApiNestedQuery(HotspotFindManyArgs)
  async hotspots(@common.Req() request: Request): Promise<Hotspot[]> {
    const args = plainToClass(HotspotFindManyArgs, request.query);
    return this.service.hotspots({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Hotspot })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async hotspot(
    @common.Param() params: HotspotWhereUniqueInput
  ): Promise<Hotspot | null> {
    const result = await this.service.hotspot({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Hotspot })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateHotspot(
    @common.Param() params: HotspotWhereUniqueInput,
    @common.Body() data: HotspotUpdateInput
  ): Promise<Hotspot | null> {
    try {
      return await this.service.updateHotspot({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Hotspot })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteHotspot(
    @common.Param() params: HotspotWhereUniqueInput
  ): Promise<Hotspot | null> {
    try {
      return await this.service.deleteHotspot({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
